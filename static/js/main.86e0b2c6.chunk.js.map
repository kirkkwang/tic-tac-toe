{"version":3,"sources":["components/Square.js","components/Restart.js","components/Emojis.js","App.js","serviceWorker.js","index.js"],"names":["Square","_this","this","react_default","a","createElement","Fragment","onClick","props","handleTurns","idx","className","value","Component","Restart","handleRestart","Emojis","type","player1Input","onChange","handleChangeP1","handleChangeP2","winning","found","arr1","arr2","every","includes","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","player1Turn","player2Turn","_this$state","state","squares","player","player1Ticks","player2Ticks","player2Input","setState","concat","toConsumableArray","handleWinning","i","length","map","gameOver","document","getElementById","reset","Array","fill","e","target","prevProps","prevState","_this2","id","Emojis_Emojis","components_Square","key","Restart_Restart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86e0b2c6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Square extends Component {\n  render() {\n    return (\n      <>\n        <div\n          onClick={() => this.props.handleTurns(this.props.idx)}\n          className=\"square\"\n        >\n          {this.props.value}\n        </div>\n      </>\n    );\n  }\n}\nexport default Square;\n","import React, { Component } from \"react\";\n\nexport default class Restart extends Component {\n  render() {\n    return (\n      <div className=\"restart\">\n        <button onClick={this.props.handleRestart}>Restart</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Emojis extends Component {\n  render() {\n    return (\n      <>\n        <label> Player 1 Input Your Emoji: </label>\n        <input\n          className=\"player1\"\n          type=\"text\"\n          value={this.props.player1Input}\n          onChange={this.props.handleChangeP1}\n        />\n        <br></br>\n        <label> Player 2 Input Your Emoji: </label>\n        <input\n          className=\"player2\"\n          type=\"text\"\n          onChange={this.props.handleChangeP2}\n        />\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Square from \"./components/Square\";\nimport \"./App.css\";\nimport Restart from \"./components/Restart\";\nimport Emojis from \"./components/Emojis\";\n\nconst winning = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst found = (arr1, arr2) => {\n  return arr1.every((value) => arr2.includes(value));\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      player: this.player1Turn,\n      player1Ticks: [],\n      player2Ticks: [],\n      player1Input: \"X\",\n      player2Input: \"O\",\n      gameOver: false,\n    };\n  }\n\n  player1Turn = `Player 1's Turn!`;\n  player2Turn = `Player 2's Turn!`;\n\n  handleTurns = (idx) => {\n    const { squares, player, player1Ticks, player2Ticks } = this.state;\n    if (squares[idx] === \"\") {\n      player === this.player1Turn\n        ? (squares[idx] = this.state.player1Input)\n        : (squares[idx] = this.state.player2Input);\n      this.setState({\n        squares: squares,\n        player:\n          player === this.player1Turn ? this.player2Turn : this.player1Turn,\n        player1Ticks:\n          player === this.player1Turn ? [...player1Ticks, idx] : player1Ticks,\n        player2Ticks:\n          player === this.player2Turn ? [...player2Ticks, idx] : player2Ticks,\n      });\n    }\n  };\n\n  handleWinning = () => {\n    for (let i = 0; i < winning.length; i++) {\n      if (found(winning[i], this.state.player1Ticks)) {\n        this.setState({\n          squares: this.state.squares.map((value) =>\n            value === \"\" ? null : value\n          ),\n          player: \"Player 1 wins!\",\n          gameOver: true,\n        });\n        break;\n      } else if (found(winning[i], this.state.player2Ticks)) {\n        this.setState({\n          squares: this.state.squares.map((value) =>\n            value === \"\" ? null : value\n          ),\n          player: \"Player 2 wins!\",\n          gameOver: true,\n        });\n        break;\n      } else if (\n        (this.state.player !== \"Player 1 wins!\" &&\n          !this.state.squares.includes(\"\") &&\n          !this.state.squares.includes(null)) ||\n        (this.state.player !== \"Player 2 wins!\" &&\n          !this.state.squares.includes(\"\") &&\n          !this.state.squares.includes(null))\n      ) {\n        this.setState({ player: \"The match was a draw...\", gameOver: true });\n      }\n    }\n  };\n\n  handleRestart = () => {\n    document.getElementById(\"emojis\").reset();\n    this.setState({\n      squares: Array(9).fill(\"\"),\n      player: this.player1Turn,\n      player1Ticks: [],\n      player2Ticks: [],\n      player1Input: \"X\",\n      player2Input: \"O\",\n    });\n  };\n\n  handleChangeP1 = (e) => {\n    this.setState({\n      player1Input:\n        this.state.player1Input === this.state.player2Input\n          ? \"X\"\n          : e.target.value,\n    });\n  };\n\n  handleChangeP2 = (e) => {\n    if (this.state.player1Input !== this.state.player2Input) {\n      this.setState({ player2Input: e.target.value });\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.player !== this.state.player) {\n      this.handleWinning();\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <h1 className=\"header\">Tic Tac Toe</h1>\n        <h3 className=\"turns\">{this.state.player}</h3>\n        <form id=\"emojis\">\n          <Emojis\n            handleChangeP1={this.handleChangeP1}\n            handleChangeP2={this.handleChangeP2}\n          />\n        </form>\n        <div className=\"gameboard\">\n          {this.state.squares.map((value, idx) => (\n            <Square\n              value={value}\n              key={idx}\n              idx={idx}\n              handleTurns={this.handleTurns}\n              handleWinning={this.handleWinning}\n            />\n          ))}\n        </div>\n        <Restart handleRestart={this.handleRestart} />\n      </>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}